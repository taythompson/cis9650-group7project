# -*- coding: utf-8 -*-
"""Group7Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mGsF6NoC4wOrYbp049y9ORDGOfs4bXVU
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import seaborn as sns # used for plot interactive graph.

data = pd.read_csv("https://blok45.s3.us-east-2.amazonaws.com/googleplaystore.csv")
print(data)

data = data.dropna().reset_index()
data = data.drop(["index"], axis = 1)
data[["Reviews"]] = data[["Reviews"]].astype("int64")
data[["Price"]] = data.Price.astype("str").map(lambda p: p[1:] if p!="0" else p).astype("float64")
data[["Size"]] = data.Size.astype("str").map(lambda S: float(S[:-1])/1000 if S[-1]=="k" else (float(S[:-1]) if S[-1]=="M" else np.nan)).astype("float64")

### Now have to convert Price, Reviews and Ratings back into Numerical Values
data['Price'] = data['Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else str(x))
data['Price'] = data['Price'].apply(lambda x: float(x))
data['Reviews'] = pd.to_numeric(data['Reviews'], errors='coerce')
print(data)

# Impact of price on app rating
priceAnalysis = data.groupby('Price', as_index=False)['Rating'].mean()
sns.set_theme(style="darkgrid")
sns.lmplot(x="Price", y="Rating", data=priceAnalysis)

# Number of Installs per Category
y = data['Category'].value_counts().index
x = data['Category'].value_counts()
xsis = []
ysis = []
for i in range(len(x)):
    xsis.append(x[i])
    ysis.append(y[i])
plt.figure(figsize=(18,13))
plt.xlabel("Count")
plt.ylabel("Category")

graph = sns.barplot(x = xsis, y = ysis, palette= "husl")
graph.set_title("Top categories in Google Playstore", fontsize = 25);

# Percent of free vs paid application
plt.figure(figsize=(10,10))
labels = data['Type'].value_counts(sort = True).index
sizes = data['Type'].value_counts(sort = True)
colors = ["blue","orange"]
explode = (0.2,0)
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=0)
plt.title('Percent of Free Vs Paid Apps in store',size = 20)
plt.show()

# Summary Stats on App Rating
plt.figure(figsize = (7,5))
plt.hist(data['Rating'], alpha=0.8,histtype='bar', color='steelblue',edgecolor='black')
plt.xlabel("Rating",size = 15)
plt.ylabel("count",size = 15)
plt.title("Rating",size = 20)
Rm = round(data['Rating'].mean() ,2)
Rsd = round(data['Rating'].std() ,2)
Rmo = round(data['Rating'].median() ,2)
Rmin = round(data['Rating'].min() ,2)
Rmax = round(data['Rating'].max() ,2)

txt = f"Summary:\n\nRating mean: {Rm}\nRating std: {Rsd}\nRating median: {Rmo}\nRating min: {Rmin}\nRating max: {Rmax}"
plt.text(1.5, 1750,txt,size=12,style = 'italic',bbox=dict(facecolor='steelblue',alpha=0.8, edgecolor='black', boxstyle='rarrow,pad=0.3'))
plt.show()

#Average rating in each category 
category_df = data.groupby("Category").Rating.mean().reset_index() 
sorted_df = category_df.sort_values(by=["Rating"], ascending=True) 

sns.set(font_scale=1.5, style="whitegrid")
f, axes = plt.subplots(figsize=(16, 6), sharex=True)


ax = sns.barplot(x="Category", y="Rating", data=sorted_df, palette="coolwarm") 
for item in ax.get_xticklabels():
    item.set_rotation(90)
ax.set(ylim=(3.5,5)) 
plt.xlabel("Average Rating")
plt.title("Average Rating per Category", size=20)

## Content Rating Analysis
plt.figure(figsize = (12,10))
plt.bar(data['Content Rating'].value_counts().index.tolist(),data['Content Rating'].value_counts(), color = "cyan")
plt.xticks(rotation=90)
for i in range(len(data['Content Rating'].value_counts())):
    txt = f"{round(data['Content Rating'].value_counts()[i]/data.shape[0]*100,2)}%"
    plt.text(i, data['Content Rating'].value_counts()[i]+150,txt,size=12,style = 'italic',color = "white",bbox=dict(facecolor='darkblue',alpha=0.8, edgecolor='white', boxstyle='round4,pad=0.5'))
plt.xlabel("Content Rating",size = 15, color = "black")
plt.ylabel("Count",size = 15, color = "black")
plt.title("Content Rating",size = 20, color = "black")
plt.show()

# Correlation between Rating and Price

n = 0
for i in data["Rating"]:
  if i != "NaN" and i >=3.5:
     n+= 1
print(f"There are {n} apps with rating above 3.5")

data.plot(x= "Price", y="Rating", kind="scatter",rot=0, fontsize=7,figsize=(20,5))
plt.show()
sns.lmplot(x='Price',y='Rating',data = data,fit_reg=True) 

# Find Max the Installs number among all apps

maxinst = data['Installs'].max()
print("Maximum number of app installs: " ) 
print(maxinst)

pd.set_option('display.max_columns', None)
data = data.dropna()
wf= data[(data["Price"] != "0")].reset_index()
dd = wf.groupby("Category")["App"].count().to_frame()
ddSorted = dd.sort_values(by = ["App"],ascending = False)
## Of the paid apps which categories have the the lowest counts
ddSorted.plot.bar(figsize = (17,11))
plt.xlabel("App Category",size = 15, color = "black")
plt.ylabel("Count",size = 15, color = "black")
plt.title("Category distribution among paid Apps ",size = 15, color = "black")
## Max number of app installs
data["Installs"] = data["Installs"].replace('[\+\,]',"",regex=True).astype(float)
ff = data.groupby("Category")["Installs"].apply(lambda x: x.sum()).to_frame()
ffSorted = ff.sort_values(by = ["Installs"],ascending = False)
ffSorted.plot.bar(figsize = (17,11))
plt.xlabel("App Category",size = 15, color = "black")
plt.ylabel("Count",size = 15, color = "black")
plt.title("Max number of app installs ",size = 15, color = "black")
## Average price in each category 
wf["Price"] = wf["Price"].replace('[\$\,]',"",regex=True).astype(float)
ddd = wf.groupby("Category")["Price"].apply(lambda x: x.mean()).to_frame()
dddSorted = ddd.sort_values(by = ["Price"],ascending = False)
dddSorted.plot.bar(figsize = (17,11))
plt.xlabel("App Category",size = 15, color = "black")
plt.ylabel("Average Price($)",size = 15, color = "black")
plt.title("Average price in each category ",size = 15, color = "black")